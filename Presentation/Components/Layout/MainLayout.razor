@inherits LayoutComponentBase
@rendermode InteractiveServer
@using Extensions
@using Presentation.Services
@using States
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Headers

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4" style="background-color:darkslategray">
            @if (appState.IsLoggedIn)
            {
                <NavLink class="nav-link" style="color:whitesmoke" href="customeredit">
                    <span style="color:whitesmoke" aria-hidden="true"></span> Konto
                </NavLink>
                <button class="nav-link ms-2" aria-hidden="true" style="color:whitesmoke" @onclick="Logout">Logga ut</button>
                @if (appState.UserInfo.Role == "USER")
                {
                    <NavLink class="nav-link d-flex align-items-center" style="color:whitesmoke" href="cartpage">
                        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" class="me-1" />
                        @CartService.Items.Sum(item => item.Quantity)
                    </NavLink>
                    
                }
            }
            else {

            <NavLink class="nav-link" style="color:whitesmoke" href="customerlogin">
                <span style="color:whitesmoke" aria-hidden="true"></span> Logga in
            </NavLink>

            <NavLink class="nav-link" style="color:whitesmoke" href="registercustomer">
                <span style="color:whitesmoke" aria-hidden="true"></span> Skapa konto
            </NavLink>

            }    


        </div>

        <article class="content px-4">

            @Body
        </article>
    </main>
</div>

@code {
    [Inject]
    public ShoppingCartService? CartService { get; set; }
    [Inject]
    public ILocalStorageService? LocalStorage { get; set; }
    [Inject]
    public NavigationManager? Navigation { get; set; }
    [Inject]
    public  AppState? appState { get; set; }
    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private HttpClient? _httpClient;

    public async Task Logout(){
        await LocalStorage.RemoveItemAsync("authToken");

        await InvokeAsync(() =>
    {
        appState.IsLoggedIn = false;
        appState.ClearUserData();
        StateHasChanged();
    });
        Navigation.NavigateTo("/", forceLoad: true); 
        
    }

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("MyAPI");
        CartService!.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (!string.IsNullOrEmpty(token))
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            }
            StateHasChanged();
        }
    }
}
